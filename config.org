#+STARTUP: overview
#+TITLE: Emacs Configuration
#+AUTHOR: Tobias Backer Dirks

* About

Welcome to my literate Emacs configuration file.

This configuration was inspired by (read: large swathes copied from)
- [[https://github.com/rememberYou/.emacs.d][rememberYou]] (=rememberYou=),
- [[https://github.com/jwiegley/dot-emacs/][John Wiegley]] (=jwiegley=),
- [[https://github.com/sachac][Sacha Chua]] (=sachac=),
- [[https://github.com/angrybacon/dotemacs][Mathieu Marques]] (=angrybacon=).

* Initialize Emacs

** Packages Sources

Configure package sources.

#+begin_src emacs-lisp :tangle yes
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+end_src

** use-package

To ease package installation =use-package= is necessary so willl need to be
installed if it isn't already.

#+begin_src emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package delight :ensure t)
  (use-package use-package-ensure-system-package :ensure t)
#+end_src

* Start Up

** Better defaults

The following values are set for a better default user experience.

#+begin_src emacs-lisp :tangle yes
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Prefers spaces over tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefers the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
   user-full-name "Tobias Backer Dirks"             ; Set the full name of the current user
   user-mail-address "omgitsaheadcrab@gmail.com"    ; Set the email address of the current user
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read-only buffers in view-mode
  (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show the column number
  (display-time-mode 1)                             ; Enable time in the mode-line
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-hl-line-mode)                             ; Hightlight current line
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent
#+end_src

** Better file management with XDG

The [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG base directory specification]] is followed.

Be careful that GNU Emacs will not create the appropriate folders if they do not
exist. Therefore, it is necessary to create them yourself:

#+begin_src bash
  mkdir ~/.cache/emacs ~/.local/share/emacs/
#+end_src

*NOTE:* the following XDG environment variables must be set in =.profile=.

#+begin_src emacs-lisp :tangle yes
  (defvar xdg-bin (getenv "XDG_BIN_HOME")
    "The XDG bin base directory.")

  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
    "The XDG cache base directory.")

  (defvar xdg-config (getenv "XDG_CONFIG_HOME")
    "The XDG config base directory.")

  (defvar xdg-data (getenv "XDG_DATA_HOME")
    "The XDG data base directory.")

  (defvar xdg-lib (getenv "XDG_LIB_HOME")
    "The XDG lib base directory.")
#+end_src

** Customization

To avoid overloading =init.el= file generated by the user using the UI,
the generated code is added to a separate file.

The XDG base directory specification is also followed for the =auto-save-file=
folder.

#+begin_src emacs-lisp :tangle yes
  (setq-default
   auto-save-list-file-name (expand-file-name (format "%s/emacs/auto-save-list" xdg-data))
   custom-file (expand-file-name (format "%s/emacs/custom.el" xdg-data)))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+end_src

** Fonts

Set default font to Souce Code Pro Medium.

#+begin_src emacs-lisp :tangle yes
  (set-face-attribute 'default nil :font "Source Code Pro Medium")
  (set-fontset-font t 'latin "Noto Sans")
#+end_src

** LSP

/lsp-mode/ (/Language Server Protocol/) is used to minimize the required
configuration for programming language support. Compatible servers can be
found on the [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] page.

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :hook ((c-mode c++-mode java-mode json-mode python-mode xml-mode) . lsp)
    :custom
    (lsp-enable-folding nil)
    (lsp-enable-links nil)
    (lsp-enable-snippet nil)
    (lsp-prefer-flymake nil)
    (lsp-session-file (expand-file-name (format "%s/emacs/lsp-session-v1" xdg-data)))
    (lsp-restart 'auto-restart))

  (use-package lsp-ui)

  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))
#+end_src

** Theming

*** All The Icons

#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :if (display-graphic-p)
  ;; :init (all-the-icons-install-fonts t)
  :config
  (add-to-list 'all-the-icons-mode-icon-alist
               '(vterm-mode all-the-icons-octicon "terminal" :v-adjust 0.2))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.xpm$" all-the-icons-octicon "file-media" :v-adjust 0.0 :face all-the-icons-dgreen))

  (add-to-list 'all-the-icons-icon-alist
               '("\\.toml$" all-the-icons-octicon "settings" :v-adjust 0.0 :face all-the-icons-dyellow))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(conf-toml-mode all-the-icons-octicon "settings" :v-adjust 0.0 :face all-the-icons-dyellow))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.lua$" all-the-icons-fileicon "lua" :face all-the-icons-dblue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(lua-mode all-the-icons-fileicon "lua" :face all-the-icons-dblue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(help-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1 :face all-the-icons-purple))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(helpful-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1 :face all-the-icons-purple))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(Info-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1))
  (add-to-list 'all-the-icons-icon-alist
               '("NEWS$" all-the-icons-faicon "newspaper-o" :height 0.9 :v-adjust -0.2))
  (add-to-list 'all-the-icons-icon-alist
               '("Cask\\'" all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.2 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(cask-mode all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.2 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '(".*\\.ipynb\\'" all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebooklist-mode all-the-icons-faicon "book" :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebook-mode all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebook-multilang-mode all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.epub\\'" all-the-icons-faicon "book" :height 1.0 :v-adjust -0.1 :face all-the-icons-green))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(nov-mode all-the-icons-faicon "book" :height 1.0 :v-adjust -0.1 :face all-the-icons-green))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(gfm-mode all-the-icons-octicon "markdown" :face all-the-icons-lblue)))

;; While we're at it: Make dired, ‘dir’ectory ‘ed’itor, look pretty
(use-package all-the-icons-dired
:hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** Pretty Symbols

#+begin_src emacs-lisp :tangle yes
      (use-package pretty-mode
        :config
        (global-pretty-mode 0))
#+end_src

*** Theme

Use [[https://github.com/arcticicestudio/nord-emacs][nord-theme]] with [[https://github.com/seagle0128/doom-modeline][doom-modeline]].

*NOTE:* to be able to see icons in the =doom-modeline=, you will need to install
[[#Icons][all-the-icons]].

#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
    :config (load-theme 'doom-nord t))

  (use-package doom-modeline
    :defer 0.1
    :config (doom-modeline-mode))

  (use-package fancy-battery
    :after doom-modeline
    :hook (after-init . fancy-battery-mode))

  (use-package solaire-mode
    :custom (solaire-mode-remap-fringe t)
    :config
    (solaire-mode-swap-bg)
    (solaire-global-mode +1))
#+end_src

** Disable graphical UI elements.

#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)              ; Disable the menu bar
  (scroll-bar-mode -1)            ; Disable the scroll bar
  (tool-bar-mode -1)              ; Disable the tool bar
  (tooltip-mode -1)              ; Disable the tooltips
#+end_src

* Languages

** Arduino

Major mode for editing Arduino sketches.

#+begin_src emacs-lisp :tangle yes
(use-package arduino-mode)
#+end_src

** C++

In order to have a fast and stable environment, I recommend using [[#lsp][LSP]] as a
client for LSP servers [[https://github.com/MaskRay/ccls][ccls]] and as server.

To use =ccls= with GNU Emacs, you must first install it with the package manager
of your operating system.

#+begin_src emacs-lisp :tangle yes
  (use-package ccls
    :after projectile
    :ensure-system-package ccls
    :custom
    (ccls-args nil)
    (ccls-executable (executable-find "ccls"))
    (projectile-project-root-files-top-down-recurring
     (append '("compile_commands.json" ".ccls")
             projectile-project-root-files-top-down-recurring))
    :config (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))

  (use-package google-c-style
    :hook ((c-mode c++-mode) . google-set-c-style)
           (c-mode-common . google-make-newline-indent))
#+end_src

To allow =ccls= to know the dependencies of your =.cpp= files with your =.h=
files, it is important to provide an =compile.commands.json= file (or a =.ccls=
file) at the root of your project.

For this, nothing could be easier. If like me you use a =CMakeLists.txt= file
for all your C++ projects, then you just need to install the =cmake= package on
your operating system and to generate the =compile.commands.json= file, you have
to do:

#+begin_src bash
  cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
  ln -s Debug/compile_commands.json
#+end_src

** CMake

CMake is a cross-platform build system generator.

#+begin_src emacs-lisp :tangle yes
  (use-package cmake-mode
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))

  (use-package cmake-font-lock
    :after (cmake-mode)
    :hook (cmake-mode . cmake-font-lock-activate))

  (use-package cmake-ide
    :after projectile
    :hook (c++-mode . my/cmake-ide-find-project)
    :preface
    (defun my/cmake-ide-find-project ()
      "Finds the directory of the project for cmake-ide."
      (with-eval-after-load 'projectile
        (setq cmake-ide-project-dir (projectile-project-root))
        (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build")))
      (setq cmake-ide-compile-command
            (concat "cd " cmake-ide-build-dir " && cmake .. && make"))
      (cmake-ide-load-db))

    (defun my/switch-to-compilation-window ()
      "Switches to the *compilation* buffer after compilation."
      (other-window 1))
    :bind ([remap comment-region] . cmake-ide-compile)
    :init (cmake-ide-setup)
    :config (advice-add 'cmake-ide-compile :after #'my/switch-to-compilation-window))
#+end_src

** CSS – LESS – SCSS

In order to have a fast and stable environment, I recommend using [[#lsp][LSP]] as a
client for LSP servers and [[https://github.com/vscode-langservers/vscode-css-languageserver-bin][vscode-css-languageserver-bin]] as server.

#+begin_src emacs-lisp :tangle yes
  (use-package css-mode
    :custom (css-indent-offset 2))

  (use-package less-css-mode
    :mode "\\.less\\'")

  (use-package scss-mode
    :mode "\\.scss\\'")
#+end_src

** CSV

#+begin_src emacs-lisp :tangle yes
  (use-package csv-mode)
#+end_src

** Docker

I like to use Docker when I need to install various databases or other services
that only work on a particular operating system while keeping my operating
system clean.

#+begin_src emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :delight "δ "
    :mode "Dockerfile\\'")
#+end_src

** Lisp

*** Emacs Lisp

#+begin_src emacs-lisp :tangle yes
  (use-package elisp-mode :ensure nil :delight "ξ ")
#+end_src

**** Eldoc

Provides minibuffer hints when working with Emacs Lisp.

#+begin_src emacs-lisp :tangle yes
  (use-package eldoc
    :delight
    :hook (emacs-lisp-mode . eldoc-mode))
#+end_src

*** Common Lisp

For arch install the sbcl and quicklisp packages.
#+begin_src bash tangle: no
sudo pacman -S sbcl
yay -S quicklisp
echo '(load "/usr/lib/quicklisp/setup")' > ~/.sbclrc
#+end_src

Then within sbcl install SLIME
#+begin_src tangle :no
(quicklisp-quickstart:install)
(ql:quickload "quicklisp-slime-helper")
#+end_src

#+begin_src emacs-lisp :tangle yes
    (if (string-equal system-type "darwin")
      (progn
        (print "FIXME: CommonLisp (ros) on MacOS"))
        ;(add-to-list 'exec-path "/usr/local/bin/")
        ;(load (expand-file-name "~/.roswell/helper.el")))
      (progn
        (load (expand-file-name "/usr/lib/quicklisp/slime-helper.el"))
        ;; Replace "sbcl" with the path to your implementation
        (setq inferior-lisp-program "sbcl")))
#+end_src

*** Scheme

For arch install the guile package.
#+begin_src bash tangle: no
sudo pacman -S guile
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package geiser
    :config
    (setq geiser-active-implementations '(guile)))
#+end_src

** HTML

In order to have a fast and stable environment, I recommend using [[#lsp][LSP]] as a
client for LSP servers and [[https://github.com/vscode-langservers/vscode-html-languageserver][vscode-html-languageserver]] as server.

To use =vscode-html-languageserver= with GNU Emacs, you must first install it
with the package manager of your operating system.

Let's configure =emmet-mode=, to produce HTML from CSS-like selector:

#+begin_src emacs-lisp :tangle yes
  (use-package emmet-mode
    :delight
    :hook (css-mode sgml-mode web-mode))
#+end_src

** INI

=ini-mode= does a good job of handling =.ini= files.

#+begin_src emacs-lisp :tangle yes
  (use-package ini-mode
    :defer 0.4
    :mode ("\\.ini\\'"))
#+end_src

** Java

In order to have a fast and stable environment, I recommend using [[https://github.com/emacs-lsp/lsp-java][lsp-java]] as
LSP client and [[https://projects.eclipse.org/projects/eclipse.jdt.ls][Eclipse JDT Language Server]] as LSP server.

*NOTE:* before configuring =lsp-java=, don't forget to configure [[#lsp][lsp-mode]].

Let's define the LSP client to use the LSP server:

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-java
    :after lsp
    :hook (java-mode . lsp)
    :custom (lsp-java-server-install-dir
             (expand-file-name (format "%s/eclipse.jdt.ls/server" xdg-lib))))
#+end_src

*** Gradle

Most of my Java projects are made with =gradle=. The configuration is easy
enough:

#+begin_src emacs-lisp :tangle yes
  (use-package gradle-mode
    :mode ("\\.java\\'" "\\.gradle\\'")
    :bind (:map gradle-mode-map
                ("C-c C-c" . gradle-build)
                ("C-c C-t" . gradle-test))
    :preface
    (defun my/switch-to-compilation-window ()
      "Switches to the *compilation* buffer after compilation."
      (other-window 1))
    :config
    (advice-add 'gradle-build :after #'my/switch-to-compilation-window)
    (advice-add 'gradle-test :after #'my/switch-to-compilation-window))
#+end_src

** JavaScript

For my JavaScript configuration, I took my sources from the Nicolas Petton's
blog which I found very well explained.

[[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Setting up Emacs for JavaScript (part #1)]]
[[https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html][Setting up Emacs for JavaScript (part #2)]]

I like to use [[https://prettier.io/][prettier]] to get my TypeScript code clean. To use it,
don't forget to install it with your package manager.

#+begin_src emacs-lisp :tangle yes
  (use-package prettier-js
    :delight
    :custom (prettier-js-args '("--print-width" "100"
                                "--single-quote" "true"
                                "--trailing-comma" "all")))
#+end_src

*** =js2-mode=

By default, GNU Emacs uses =js-mode= as major mode for JavaScript buffers and I
prefer use =js2-mode= instead because of his abilities to parses buffers and
builds an AST for things like syntax highlighting.

#+begin_src emacs-lisp :tangle yes
  (use-package js2-mode
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . prettier-js-mode))
    :mode "\\.js\\'"
    :custom (js-indent-level 2))
#+end_src

*** =js2-refactor=

Provides powerful refactoring based on the AST generated by =js2-mode=.

#+begin_src emacs-lisp :tangle yes
  (use-package js2-refactor
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill)
                ("M-." . nil))
    :hook ((js2-mode . js2-refactor-mode)
           (js2-mode . (lambda ()
                         (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
    :config (js2r-add-keybindings-with-prefix "C-c C-r"))
#+end_src

*** =xref-js2=

Makes it easy to jump to function references or definitions.

#+begin_src emacs-lisp :tangle yes
  (use-package xref-js2 :defer 5)
#+end_src

*** =tern=

Parses JavaScript files in a project and makes type inference to provide
meaningful completion (with type clues) and cross-reference support.

Unfortunately, =tern= has some problems with cross-references that explain why I
am using =xref-js2= instead.

#+begin_src emacs-lisp :tangle yes
  (use-package tern
    :ensure-system-package (tern . "npm install -g tern")
    :bind (("C-c C-c" . compile)
           :map tern-mode-keymap
           ("M-." . nil))
    :hook ((js2-mode . company-mode)
           (js2-mode . tern-mode)))
#+end_src

Then, add a =.tern-project= file to the root of your project.

Here is an example configuration for a project that uses =requirejs= and
=jQuery=, without taking into account of the =bower_components= directory:

#+begin_src json
  {
      "libs": [
          "jquery"
      ],
      "loadEagerly": [
          "./**/*.js"
      ],
      "dontLoad": [
          "./bower_components/"
      ],
      "plugins": {
          "requirejs": {
              "baseURL": "./"
          }
      }
  }
#+end_src

** JSON

JSON is used a lot, especially in the web. Therefore, it is important to have a
decent configuration to feel comfortable when handling such files.

#+begin_src emacs-lisp :tangle yes
  (use-package json-mode
    :delight "J "
    :mode "\\.json\\'"
    :hook (before-save . my/json-mode-before-save-hook)
    :preface
    (defun my/json-mode-before-save-hook ()
      (when (eq major-mode 'json-mode)
        (json-pretty-print-buffer)))

    (defun my/json-array-of-numbers-on-one-line (encode array)
      "Prints the arrays of numbers in one line."
      (let* ((json-encoding-pretty-print
              (and json-encoding-pretty-print
                   (not (loop for x across array always (numberp x)))))
             (json-encoding-separator (if json-encoding-pretty-print "," ", ")))
        (funcall encode array)))
    :config (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line))
#+end_src

** LaTeX

I use LaTeX for my reports, CVs, summaries, etc.

#+begin_src emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex
    :bind (:map TeX-mode-map
                ("C-c C-o" . TeX-recenter-output-buffer)
                ("C-c C-l" . TeX-next-error)
                ("M-[" . outline-previous-heading)
                ("M-]" . outline-next-heading))
    :hook (LaTeX-mode . reftex-mode)
    :preface
    (defun my/switch-to-help-window (&optional ARG REPARSE)
      "Switches to the *TeX Help* buffer after compilation."
      (other-window 1))
    :custom
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-master 'dwim)
    (TeX-parse-self t)
    (TeX-PDF-mode t)
    (TeX-source-correlate-mode t)
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    :config
    (advice-add 'TeX-next-error :after #'my/switch-to-help-window)
    (advice-add 'TeX-recenter-output-buffer :after #'my/switch-to-help-window)
    ;; the ":hook" doesn't work for this one... don't ask me why.
    (add-hook 'TeX-after-compilation-finished-functions 'TeX-revert-document-buffer))

  (use-package bibtex
    :after auctex
    :hook (bibtex-mode . my/bibtex-fill-column)
    :preface
    (defun my/bibtex-fill-column ()
      "Ensures that each entry does not exceed 120 characters."
      (setq fill-column 120)))

  (use-package company-auctex
    :after (auctex company)
    :config (company-auctex-init))

  (use-package company-math :after (auctex company))
#+end_src

I want a TeX engine that can deal with Unicode and use any font I like.

#+begin_src emacs-lisp :tangle yes
  (setq-default TeX-engine 'xetex)
#+end_src

*** =reftex=

Minor mode with distinct support for \label, \ref and \cite in LaTeX.

#+begin_src emacs-lisp :tangle yes
  (use-package reftex
    :after auctex
    :custom
    (reftex-plug-into-AUCTeX t)
    (reftex-save-parse-info t)
    (reftex-use-multiple-selection-buffers t))
#+end_src

** Lua

I rarely program in Lua, but when I do, =lua-mode= satisfies me amply.

#+begin_src emacs-lisp :tangle yes
  (use-package lua-mode
    :delight "Λ "
    :mode "\\.lua\\'"
    :interpreter ("lua" . lua-mode))
#+end_src

** Markdown

Before you can use this package, make sure you install =pandoc= on your
operating system.

#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure-system-package (pandoc . "yay -S pandoc")
    :delight "μ "
    :mode ("\\.markdown\\'" "\\.md\\'")
    :custom (markdown-command "/usr/bin/pandoc"))

  (use-package markdown-preview-mode
    :after markdown-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/highlight.min.js")
           "<script>
              $(document).on('mdContentChange', function() {
                $('pre code').each(function(i, block)  {
                  hljs.highlightBlock(block);
                });
              });
            </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                   "3.0.1/github-markdown.min.css")
           (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/styles/github.min.css")

           "<style>
              .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }

              @media (max-width: 767px) { .markdown-body { padding: 15px; } }
            </style>")))
#+end_src

** Python

In order to have a fast and stable environment, I recommend to use [[https://github.com/andrew-christianson/lsp-python-ms][lsp-python-ms]]
as LSP client and [[https://github.com/Microsoft/python-language-server][mspyls]] as LSP server as =mspyls= is faster than =pyls=.
I use [[https://github.com/psf/black][black]] to reformat my Python buffer. Before use it, don't forget to
install =python-black= in your system.

To sort my Python imports, [[https://github.com/paetzke/py-isort.el][py-isort]] does a good job. Also, don't forget to
install =python-isort= in your system.

Automagically resolve imports (requires =importmagic= and =epc=)

Let's take a look to my Python configuration:

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-pyright
    :if (executable-find "pyright")
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))

  (use-package lsp-python-ms
    :defer 0.3
    :custom (lsp-python-ms-auto-install-server t))

  (use-package python
    :delight "π "
    :bind (("M-[" . python-nav-backward-block)
           ("M-]" . python-nav-forward-block))
    :preface
    (defun python-remove-unused-imports()
      "Removes unused imports and unused variables with autoflake."
      (interactive)
      (if (executable-find "autoflake")
          (progn
            (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                   (shell-quote-argument (buffer-file-name))))
            (revert-buffer t t t))
        (warn "python-mode: Cannot find autoflake executable."))))

  (use-package python-black
    :demand t
    :after python))

  (use-package py-isort
    :after python
    :hook ((python-mode . pyvenv-mode)))

  (use-package pyenv-mode
    :after python
    :hook ((python-mode . pyenv-mode)
           (projectile-switch-project . projectile-pyenv-mode-set))
    :custom (pyenv-mode-set "3.8.5")
    :preface
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name."
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset)))))

  (use-package pyvenv
    :after python
    :hook ((python-mode . pyvenv-mode)
           (python-mode . (lambda ()
                            (if-let ((pyvenv-directory (find-pyvenv-directory (buffer-file-name))))
                                (pyvenv-activate pyvenv-directory))
                            (lsp))))
    :custom
    (pyvenv-default-virtual-env-name "env")
    (pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:"
                                                           pyvenv-virtual-env-name "]")))
    :preface
    (defun find-pyvenv-directory (path)
      "Checks if a pyvenv directory exists."
      (cond
       ((not path) nil)
       ((file-regular-p path) (find-pyvenv-directory (file-name-directory path)))
       ((file-directory-p path)
        (or
         (seq-find
          (lambda (path) (file-regular-p (expand-file-name "pyvenv.cfg" path)))
          (directory-files path t))
         (let ((parent (file-name-directory (directory-file-name path))))
           (unless (equal parent path) (find-pyvenv-directory parent))))))))

  (use-package importmagic
    :config
    (add-hook 'python-mode-hook 'importmagic-mode))
#+end_src

** Shell-script

A recent thing when you create/edit a shell script file is to automatically
grant it execution rights (with =chmod +x=).

The snippet below ensures that the execution right is automatically granted to
save a shell script file that begins with a =#!= shebang:

#+begin_src emacs-lisp :tangle yes
  (use-package sh-script
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

** SQL

=sql-indent= gives me the possibility to easily manage =.sql= files.

#+begin_src emacs-lisp :tangle yes
  (use-package sql-indent
    :after (:any sql sql-interactive-mode)
    :delight sql-mode "Σ ")
#+end_src

** XML

Unfortunately, XML is still used, especially for creating web services in SOAP.
However, =xml-mode= exists to help us:

#+begin_src emacs-lisp :tangle yes
  (use-package xml-mode
    :ensure nil
    :mode ("\\.wsdl\\'" "\\.xsd\\'"))
#+end_src

** YAML

=yaml-mode= gives me the possibility to easily manage =.yml= files.

#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode
    :delight "ψ "
    :mode "\\.yml\\'"
    :interpreter ("yml" . yml-mode))
#+end_src

* Backups

#+begin_src emacs-lisp :tangle yes
  ;; setting backup dir
  (setq version-control t     ;; Use version numbers for backups.
        kept-new-versions 10  ;; Number of newest versions to keep.
        kept-old-versions 0   ;; Number of oldest versions to keep.
        delete-old-versions t ;; Don't ask to delete excess backup versions.
        backup-by-copying t)  ;; Copy all files, don't rename them.
  (setq vc-make-backup-files t)
  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.config/emacs/backups/per-save")))
  (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.config/emacs/backups/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))
#+end_src

* Button Lock

Enable button lock mode
#+begin_src emacs-lisp :tangle yes
(use-package button-lock
:ensure t
:config (global-button-lock-mode 1))
#+end_src


#+begin_src emacs-lisp :tangle yes
(defun test-link ()
    (interactive)
    (button-lock-set-button
     "test\\?name=[a-zA-Z0-9_\\.]*"
     (lambda ()
       (interactive)
       (browse-url (concat "http://localhost:8080/"
                           (buffer-substring
                            (previous-single-property-change (point) 'mouse-face)
                            (next-single-property-change (point) 'mouse-face)))))
     :face 'link
     :face-policy 'prepend
     :keyboard-binding "RET"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(add-hook 'python-mode-hook
          (lambda ()  (test-link)))
#+end_src

* Company

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :config
    (setq company-idle-delay 0.3
          company-dabbrev-downcase nil)
    (global-company-mode 1)
    (global-set-key (kbd "C-<tab>") 'company-complete))
#+end_src

** Company c-headers

Auto completion for c/c++ headers
#+begin_src emacs-lisp :tangle yes
  (use-package company-c-headers)

  (add-to-list 'company-backends 'company-c-headers)
#+end_src

** Company Arduino

Configuration to use auto completion in arudino-mode.
#+begin_src emacs-lisp :tangle yes
  (use-package company-arduino)

  ;; Configuration for irony.el
  ;; Add arduino's include options to irony-mode's variable.
  (add-hook 'irony-mode-hook 'company-arduino-turn-on)

  ;; Configuration for company-c-headers.el
  ;; The `company-arduino-append-include-dirs' function appends
  ;; Arduino's include directories to the default directories
  ;; if `default-directory' is inside `company-arduino-home'. Otherwise
  ;; just returns the default directories.
  ;; Please change the default include directories accordingly.
  (defun my-company-c-headers-get-system-path ()
    "Return the system include path for the current buffer."
    (let ((default '("/usr/include/" "/usr/local/include/")))
      (company-arduino-append-include-dirs default t)))
  (setq company-c-headers-path-system 'my-company-c-headers-get-system-path)

  ;; Activate irony-mode on arduino-mode
  (add-hook 'arduino-mode-hook 'irony-mode)
#+end_src

** Yasnippet in all company backends

Add yasnippet support for all company backends
#+begin_src emacs-lisp :tangle yes
(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")

(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(setq company-backends (mapc #'company-mode/backend-with-yas company-backends))
#+end_src

* Deft

Deft is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes.

#+begin_src emacs-lisp :tangle yes
  (use-package deft
    :bind ("<f8>" . deft)
    :init (setq deft-directory "~/Dropbox/org/notes/"
                deft-extensions '("org" "md" "txt")
                deft-default-extension "org"
                deft-recursive t
                deft-auto-save-interval 0))
#+end_src

* Fun & Games

** Speed Type

#+begin_src emacs-lisp :tangle yes
(use-package speed-type :defer t)
#+end_src

* Ido Mode

#+begin_src emacs-lisp :tangle yes
  (use-package flx-ido)
  ;; ido mode
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere 1)
  (setq ido-enable-prefix t)
  (ido-mode 1)
  (flx-ido-mode 1)
  (setq ido-file-extensions-order '(".py" ".org" ".txt" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))

  ;; ido vertical
  (use-package ido-vertical-mode
    :init
    (ido-vertical-mode 1))

  ;; ido switch buffer
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+end_src

* Interface
** Beacon

Highlight current cursor position with fancy fade.

#+begin_src emacs-lisp :tangle yes
  (use-package beacon
    :init
    (beacon-mode 1))
#+end_src

** Buffers

Better buffers with ibuffer
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; ibuffer expert mode (delete without asking)
  (setq ibuffer-expert t)
#+end_src

Group buffers by version control project
#+begin_src emacs-lisp :tangle yes
  (use-package ibuffer-vc
      :ensure t)
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
#+end_src

Add all the icons
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons-ibuffer
  :ensure t
  :init (all-the-icons-ibuffer-mode 1))
#+end_src

** Column Numbers

#+begin_src emacs-lisp :tangle yes
  (column-number-mode 1)
#+end_src

** Conservative Scrolling

Reducing scroll distance so it's actually useful.

#+begin_src emacs-lisp :tangle yes
  (setq scroll-conservatively 100)
#+end_src

** Dashboard

#+begin_src emacs-lisp :tangle yes
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq show-week-agenda t)
    (setq dashboard-items '((recents . 10)
                            (bookmarks . 2)
                            (projects . 4)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (add-to-list 'recentf-exclude (format "%s/\\.config/emacs/elpa/.*" (getenv "HOME"))))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (setq show-week-agenda t)
  (add-to-list 'dashboard-items '(agenda) t)
  (setq dashboard-center-content t)
#+end_src

** Disable Splash Screen

#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-message t)
#+end_src

** Line Numbers

#+begin_src emacs-lisp :tangle yes
  ;; line numbers (except for some)
  (use-package hlinum
    :config
    (hlinum-activate)
    (add-hook 'prog-mode-hook 'linum-mode)
    (add-hook 'text-mode-hook 'linum-mode)
    (add-hook 'org-mode-hook 'linum-mode))
#+end_src

** Menubar Deactivation

#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
#+end_src

** Popup Kill Ring

#+begin_src emacs-lisp :tangle yes
  (use-package popup-kill-ring
    :bind ("C-s-v" . popup-kill-ring))
#+end_src

** Projectile

#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ido)
    (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
    (defadvice projectile-on (around exlude-tramp activate)
      "This should disable projectile when visiting a remote file"
      (unless  (--any? (and it (file-remote-p it))
                       (list
                        (buffer-file-name)
                        list-buffers-directory
                        default-directory
                        dired-directory))
        ad-do-it)))
#+end_src

** Scrollbar Deactivation

#+begin_src emacs-lisp :tangle yes
  (scroll-bar-mode -1)
#+end_src

** Side-By-Side Buffers

Buffers open with vertical split rather than horizontal split by default.

#+begin_src emacs-lisp :tangle yes
  (defun 2-windows-vertical-to-horizontal ()
    (let ((buffers (mapcar 'window-buffer (window-list))))
      (when (= 2 (length buffers))
        (delete-other-windows)
        (set-window-buffer (split-window-horizontally) (cadr buffers)))))
  (add-hook 'emacs-startup-hook '2-windows-vertical-to-horizontal)
#+end_src

** Spaceline

*** Config

#+begin_src emacs-lisp :tangle yes
  (use-package spaceline)

  (use-package spaceline-config
    :ensure spaceline
    :config
    (spaceline-helm-mode 1)
    (spaceline-emacs-theme))
#+end_src

*** Theme

#+begin_src emacs-lisp :tangle yes
  (use-package spaceline-all-the-icons
    :after spaceline
    :config
    (spaceline-all-the-icons-theme)
    (setq-default spaceline-all-the-icons-separator-type 'arrow)
    (setq spaceline-all-the-icons-hide-long-buffer-path t))
#+end_src

** Toolbar Deactivation

#+begin_src emacs-lisp :tangle yes
  (tool-bar-mode -1)
#+end_src

** Visual Line Mode

#+begin_src emacs-lisp :tangle yes
  ;; visual line mode (except for pdf)
  (global-visual-line-mode 1)
#+end_src

** Which Key

Which keybindings appears when you press part of a hotkey and wait.

#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :init
    (which-key-mode))
#+end_src

* Ivy

Counsel and Swiper.
#+begin_src emacs-lisp :tangle yes
  (use-package ivy)
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq ivy-extra-directories '())
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  (setq counsel-find-file-ignore-regexp (regexp-opt '("__pycache__" ".pyc" ".pytest_cache")))
#+end_src

Smex for M-x recently used commands.
#+begin_src emacs-lisp :tangle yes
  (use-package smex
    :init (setq-default smex-history-length 32))
#+end_src

Ivy integration with various modes.
#+begin_src emacs-lisp :tangle yes
  ;; Integration with `projectile'
  (with-eval-after-load 'projectile
    (setq projectile-completion-system 'ivy))

  ;; Integration with `magit'
  (with-eval-after-load 'magit
    (setq magit-completing-read-function 'ivy-completing-read))

  ;; Ivy integration for Projectile
  (use-package counsel-projectile
    :init
    (setq counsel-projectile-grep-initial-input '(ivy-thing-at-point))
    (counsel-projectile-mode 1))

  ;; Integrate yasnippet
  (use-package ivy-yasnippet
    :commands ivy-yasnippet--preview
    :bind ("C-c C-y" . ivy-yasnippet)
    :config (advice-add #'ivy-yasnippet--preview :override #'ignore))

  ;; Correcting words with flyspell via Ivy
  (use-package flyspell-correct-ivy
    :after flyspell
    :bind (:map flyspell-mode-map
                ([remap flyspell-correct-word-before-point] . flyspell-correct-previous-word-generic)))

  ;; Display world clock using Ivy
  (use-package counsel-world-clock
    :bind (:map counsel-mode-map
                ("C-c c k" . counsel-world-clock)))

  ;; Tramp ivy interface
  (use-package counsel-tramp
    :bind (:map counsel-mode-map
                ("C-c c v" . counsel-tramp)))
#+end_src

Add all the icons to ivy!
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+end_src

* Keybindings
** Copy Whole Line

#+begin_src emacs-lisp :tangle yes
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src

** Expand Region

#+begin_src emacs-lisp :tangle yes
  (use-package expand-region
    :bind ("C-q" . er/expand-region))
#+end_src

** F5 Refresh

Setting buffer refresh to F5 as usual in other programs.

#+begin_src emacs-lisp :tangle yes
  (global-set-key [f5]
                  '(lambda () "Refresh the buffer from the disk (prompt of modified)."
                     (interactive)
                     (revert-buffer t (not (buffer-modified-p)) t)))
#+end_src

** Font Size

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

** Goto-line

Rebind goto-line to Meta+g rather than Meta+g+g

#+begin_src emacs-lisp :tangle yes
  (global-set-key "\M-g" 'goto-line)
#+end_src

** HHKB Super-Meta Switch

Check if HHKB connected by counting occurences in dmesg output. If exists swap super and meta keys.

#+begin_src emacs-lisp :tangle yes
  (defun count-occurences (regex string)
    (recursive-count regex string 0))
  (defun recursive-count (regex string start)
    (if (string-match regex string start)
        (+ 1 (recursive-count regex string (match-end 0)))
      0))
  (setq dmesg-out
        (shell-command-to-string "/usr/bin/dmesg"))
  (setq hhkb-times
        (count-occurences "HHKB" dmesg-out))
  (if (> hhkb-times 0)
      (progn
        ;; (setq  x-meta-keysym 'meta
        ;;        x-super-keysym 'super)
        (message "HHKB connected on Linux.")))
#+end_src

** Kill All Buffers

#+begin_src emacs-lisp :tangle yes
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+end_src

** MacOS Super-Meta Bind

Check if host system is running MacOS and bind super and meta if true.
#+begin_src emacs-lisp :tangle yes
  (if (string-equal system-type "darwin")
      (progn
        (setq mac-command-modifier 'meta
              mac-option-modifier 'super)
        (message "MacOS detected.")))
#+end_src

** Reload Config

#+begin_src emacs-lisp :tangle yes
  (defun reload-init-file ()
    (interactive)
    (load-file "~/.config/emacs/init.el"))

  (global-set-key (kbd "C-s-M-u") 'reload-init-file)
#+end_src

* Magit

Install Magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit)
  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src

* Org Mode
** Org

Use org-mode from Melpa.

#+begin_src emacs-lisp :tangle yes
  (use-package org
    :ensure org-plus-contrib
    :defer t
    ;;:init (setq initial-major-mode 'org-mode) ;; Set mode of *scratch* buffer
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           :map org-mode-map
           ;; ("C-h" . org-delete-backward-char)
           ("C-c !" . org-time-stamp-inactive))
    :mode ("\\.org$" . org-mode))
#+end_src

** Org Agenda Files

#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-files '("~/Dropbox/org/inbox.org"
                           "~/Dropbox/org/private.org"
                           "~/Dropbox/org/work.org"
                           "~/Dropbox/org/remind.org"))
#+end_src

** Org Bullets

#+begin_src emacs-lisp :tangle yes
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda ()  (org-bullets-mode))))
#+end_src

** Org Capture Templates

#+begin_src emacs-lisp :tangle yes
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Dropbox/org/inbox.org" "Tasks")
                                 "* TODO %i%?")))
#+end_src

** Org Keywords

#+begin_src emacs-lisp :tangle yes
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+end_src

** Org Refile Targets

#+begin_src emacs-lisp :tangle yes
  (setq org-refile-targets '(("~/Dropbox/org/work.org" :maxlevel . 4)
                             ("~/Dropbox/org/private.org" :maxlevel . 3)
                             ("~/Dropbox/org/someday.org" :level . 1)
                             ("~/Dropbox/org/remind.org" :maxlevel . 2)))
#+end_src

** Org Settings

#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-SRC-window-setup 'current-window)
  (setq org-SRC-fontify-natively t)
  (setq org-SRC-tab-acts-natively t)
#+end_src

** Org Sort Recursively

Function to sort all entires in the current buffer, recursively.
#+begin_src emacs-lisp :tangle yes
(defun org-sort-buffer ()
  "Sort all entries in the current buffer, recursively. Including top level"
  (interactive)
  (org-sort-entries nil ?a)
  (org-map-entries (lambda ()
                     (condition-case x
                         (org-sort-entries nil ?a)
                       (user-error)))))
#+end_src

** Org Template Keywords

#+begin_src emacs-lisp :tangle yes
  (require 'org-tempo)
#+end_src

* PDF Tools

#+begin_src emacs-lisp :tangle yes
(use-package pdf-view
    :ensure pdf-tools
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :bind (:map pdf-view-mode-map
           ("C-s" . isearch-forward))
    :config
    ;; WORKAROUND: Fix compilation errors on macOS.
    ;; @see https://github.com/politza/pdf-tools/issues/480
    (when (string-equal system-type "darwin")
      (setenv "PKG_CONFIG_PATH"
              "/usr/local/lib/pkgconfig:/usr/local/opt/libffi/lib/pkgconfig"))
    (pdf-tools-install t nil t t))
#+end_src

* Snippets
** Enable Yasnippet

#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src

** Individual Mode Hooks

*** Arduino

#+begin_src emacs-lisp :tangle yes
(add-hook 'ardunio-mode-hook 'yas-minor-mode)
#+end_src

*** Bash

#+begin_src emacs-lisp :tangle yes
  (add-hook 'shell-script-mode-hook 'yas-minor-mode)
#+end_src

*** C

#+begin_src emacs-lisp :tangle yes
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+end_src

*** C++

#+begin_src emacs-lisp :tangle yes
  (add-hook 'c++-mode-hook 'yas-minor-mode)
#+end_src

*** HTML

#+begin_src emacs-lisp :tangle yes
  (add-hook 'html-mode-hook 'yas-minor-mode)
#+end_src

*** Lisp

**** Common Lisp

#+begin_src emacs-lisp :tangle yes
(add-hook 'lisp-mode-hook 'yas-minor-mode)
#+end_src

**** Scheme

#+begin_src emacs-lisp :tangle yes
(add-hook 'scheme-mode-hook 'yas-minor-mode)
#+end_src

*** Org Mode

#+begin_src emacs-lisp :tangle yes
  (defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))
  (add-hook 'org-mode-hook
      (lambda ()
        (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
        (define-key yas-keymap [tab] 'yas-next-field)))
  (add-hook 'org-mode-hook 'yas-minor-mode)
#+end_src

*** Python

#+begin_src emacs-lisp :tangle yes
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+end_src

* Spellchecking

#+begin_src emacs-lisp :tangle yes
    ;; find aspell and hunspell automatically
    (cond
     ;; try hunspell at first
     ;; if hunspell does NOT exist, use aspell
     ((executable-find "hunspell")
      (setq ispell-program-name "hunspell")
      (setq ispell-local-dictionary "en_GB")
      (setq ispell-local-dictionary-alist
            ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
            ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
            '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB") nil utf-8)
              ))
  )
     ((executable-find "aspell")
      (setq ispell-program-name "aspell")
      ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
      (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB"))))
#+end_src

* Terminal

** Colour

Enable more terminal colours.

#+begin_src emacs-lisp :tangle yes
  (use-package eterm-256color
    :config
    (add-hook 'term-mode-hook #'eterm-256color-mode))
#+end_src

** Default Shell

Setting default shell to bash within ansi-term.

#+begin_src emacs-lisp :tangle yes
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term  (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src

** Emacs Shell $PATH

Make sure Emacs shell sees correct system $PATH from .bash_profile

#+begin_src emacs-lisp :tangle yes
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))
#+end_src

** Hotkey

Setting hotkey for ansi-term in emacs - Super+T.

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "s-t") 'ansi-term)
#+end_src

* Useful Tweaks

** Better Commenting

#+begin_src emacs-lisp :tangle yes
(use-package comment-dwim-2
  :ensure t
  :bind ("M-;" . 'comment-dwim-2))
#+end_src

** Consistent Answers

Setting yes and no to y and n for brevity and consistency.

#+begin_src emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Delete Selection Mode

#+begin_src emacs-lisp :tangle yes
(delete-selection-mode 1)
#+end_src

** Delete Trailing Whitespace

#+begin_src emacs-lisp :tangle yes
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** IEdit

#+begin_src emacs-lisp :tangle yes
(use-package iedit
  :ensure t)
#+end_src

** Move Line

#+begin_src emacs-lisp :tangle yes
;; M-↑,↓ moves line, or marked region; prefix is how many lines.
(use-package move-text
  :config (move-text-default-bindings))
#+end_src

** Pair Completion

#+begin_src emacs-lisp :tangle yes
  (use-package smartparens
    :config
    (setq sp-show-pair-from-inside nil)
    (require 'smartparens-config)
    (smartparens-global-mode t)
    :diminish smartparens-mode)
#+end_src

** Persistent Scratch

Persistent the scratch buffer
#+begin_src emacs-lisp :tangle yes
  (use-package persistent-scratch
    :preface
    (defun my-save-buffer ()
      "Save scratch and other buffer."
      (interactive)
      (let ((scratch-name "*scratch*"))
        (if (string-equal (buffer-name) scratch-name)
            (progn
              (message "Saving %s..." scratch-name)
              (persistent-scratch-save)
              (message "Wrote %s" scratch-name))
          (save-buffer))))
    :hook (after-init . persistent-scratch-setup-default)
    :bind (:map lisp-interaction-mode-map
           ("C-x C-s" . my-save-buffer)))
#+end_src

** Quote Lines

#+begin_src emacs-lisp :tangle yes
  (defun quote-lines ()
    "Change current text block's lines to quoted lines with comma or other separator char.
  When there is a text selection, act on the selection, else, act on a text block separated by blank lines.

  For example,

   cat
   dog
   cow

  becomes

   \"cat\",
   \"dog\",
   \"cow\",

  or

   (cat)
   (dog)
   (cow)

  If the delimiter is any left bracket, the end delimiter is automatically the matching bracket.

  URL `http://ergoemacs.org/emacs/emacs_quote_lines.html'
  Version 2017-01-08"
    (interactive)
    (let* (
           $p1
           $p2
           ($quoteToUse
            (read-string
             "Quote to use:" "\"" nil
             '(
               ""
               "\""
               "'"
               "("
               "{"
               "["
               )))
           ($separator
            (read-string
             "line separator:" "," nil
             '(
               ""
               ","
               ";"
               )))
           ($beginQuote $quoteToUse)
           ($endQuote
            ;; if begin quote is a bracket, set end quote to the matching one. else, same as begin quote
            (let (($syntableValue (aref (syntax-table) (string-to-char $beginQuote))))
              (if (eq (car $syntableValue ) 4) ; ; syntax table, code 4 is open paren
                  (char-to-string (cdr $syntableValue))
                $quoteToUse
                ))))
      (if (use-region-p)
          (progn
            (setq $p1 (region-beginning))
            (setq $p2 (region-end)))
        (progn
          (if (re-search-backward "\n[ \t]*\n" nil "NOERROR")
              (progn (re-search-forward "\n[ \t]*\n")
                     (setq $p1 (point)))
            (setq $p1 (point)))
          (re-search-forward "\n[ \t]*\n" nil "NOERROR")
          (skip-chars-backward " \t\n" )
          (setq $p2 (point))))
      (save-excursion
        (save-restriction
          (narrow-to-region $p1 $p2)
          (goto-char (point-min))
          (skip-chars-forward "\t ")
          (insert $beginQuote)
          (goto-char (point-max))
          (insert $endQuote)
          (goto-char (point-min))
          (while (re-search-forward "\n\\([\t ]*\\)" nil "NOERROR" )
            (replace-match
             (concat $endQuote $separator (concat "\n" (match-string 1)) $beginQuote) "FIXEDCASE" "LITERAL"))
          ;;
          ))))
#+end_src

** Show Parens

#+begin_src emacs-lisp :tangle yes
(show-paren-mode 1)
#+end_src

** Sudo Edit

#+begin_src emacs-lisp :tangle yes
  (use-package sudo-edit
    :bind ("s-u" . sudo-edit))
#+end_src

** UTF-8

*** UFT-8 Everywhere

#+begin_src emacs-lisp :tangle yes
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

*** UTF-8 Uppercase Declaration

#+begin_src emacs-lisp :tangle yes
  (define-coding-system-alias 'UTF-8 'utf-8)
#+end_src

** Warning Bell Deactivation

Apparently there is a warning bell/beep and light - not seen it though..

#+begin_src emacs-lisp :tangle yes
  (setq ring-bell-function 'ignore)
#+end_src

* Zetteldeft

Extend the deft package and turn it into a (very very) basic Zettelkasten note-taking system. Requires Avy for text movement.

#+begin_src emacs-lisp :tangle yes
  (use-package avy)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package zetteldeft)
  (zetteldeft-set-classic-keybindings)
#+end_src
