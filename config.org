#+STARTUP: overview
#+TITLE: Emacs Config
#+CREATOR: Tobias Backer Dirks

* Appearance
** All The Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p)
  ;; :init (all-the-icons-install-fonts t)
  :config
  (add-to-list 'all-the-icons-mode-icon-alist
               '(vterm-mode all-the-icons-octicon "terminal" :v-adjust 0.2))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.xpm$" all-the-icons-octicon "file-media" :v-adjust 0.0 :face all-the-icons-dgreen))

  (add-to-list 'all-the-icons-icon-alist
               '("\\.toml$" all-the-icons-octicon "settings" :v-adjust 0.0 :face all-the-icons-dyellow))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(conf-toml-mode all-the-icons-octicon "settings" :v-adjust 0.0 :face all-the-icons-dyellow))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.lua$" all-the-icons-fileicon "lua" :face all-the-icons-dblue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(lua-mode all-the-icons-fileicon "lua" :face all-the-icons-dblue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(help-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1 :face all-the-icons-purple))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(helpful-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1 :face all-the-icons-purple))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(Info-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1))
  (add-to-list 'all-the-icons-icon-alist
               '("NEWS$" all-the-icons-faicon "newspaper-o" :height 0.9 :v-adjust -0.2))
  (add-to-list 'all-the-icons-icon-alist
               '("Cask\\'" all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.2 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(cask-mode all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.2 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '(".*\\.ipynb\\'" all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebooklist-mode all-the-icons-faicon "book" :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebook-mode all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebook-multilang-mode all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.epub\\'" all-the-icons-faicon "book" :height 1.0 :v-adjust -0.1 :face all-the-icons-green))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(nov-mode all-the-icons-faicon "book" :height 1.0 :v-adjust -0.1 :face all-the-icons-green))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(gfm-mode all-the-icons-octicon "markdown" :face all-the-icons-lblue)))

;; While we're at it: Make dired, ‘dir’ectory ‘ed’itor, look pretty
(use-package all-the-icons-dired
:hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** Pretty Symbols
:PROPERTIES:
:ID:       054e44bc-f5da-4d6c-a629-fd4799aaafa1
:END:
:PROPERTIES:
:ID:       2eba590b-acdd-40de-83fd-3cc140ce777f
:END
#+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (global-pretty-mode 0))
#+END_SRC

** Set Theme
:PROPERTIES:
:ID:       dd134dbf-0592-43cb-ab2b-5bebb16a81e5
:END:
Disable other themes before loading new one
#+BEGIN_SRC emacs-lisp
(defadvice load-theme (before theme-dont-propagate activate)
  "Disable theme before loading new one."
  (mapc #'disable-theme custom-enabled-themes))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :disabled
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-tomorrow-night t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package poet-theme
  :disabled
  :ensure t
  :config
  (load-theme 'poet t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :config
  (setq zenburn-use-variable-pitch t)
  (setq zenburn-scale-org-headlines t)
  (setq zenburn-scale-outline-headlines t)
  (load-theme 'zenburn t))
#+END_SRC

* Backups
:PROPERTIES:
:ID:       1e20764b-eb6e-47da-94da-29d58674fe9a
:END:
#+BEGIN_SRC emacs-lisp
  ;; setting backup dir
  (setq version-control t     ;; Use version numbers for backups.
        kept-new-versions 10  ;; Number of newest versions to keep.
        kept-old-versions 0   ;; Number of oldest versions to keep.
        delete-old-versions t ;; Don't ask to delete excess backup versions.
        backup-by-copying t)  ;; Copy all files, don't rename them.
  (setq vc-make-backup-files t)
  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.emacs.d/backups/per-save")))
  (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs.d/backups/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))
#+END_SRC

* Button Lock
Enable button lock mode
#+BEGIN_SRC emacs-lisp
(use-package button-lock
:ensure t
:config (global-button-lock-mode 1))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(defun test-link ()
    (interactive)
    (button-lock-set-button
     "test\\?name=[a-zA-Z0-9_\\.]*"
     (lambda ()
       (interactive)
       (browse-url (concat "http://localhost:8080/"
                           (buffer-substring
                            (previous-single-property-change (point) 'mouse-face)
                            (next-single-property-change (point) 'mouse-face)))))
     :face 'link
     :face-policy 'prepend
     :keyboard-binding "RET"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
          (lambda ()  (test-link)))
#+END_SRC

* Company
:PROPERTIES:
:ID:       aa1642d2-2cd6-4204-8052-4de2162e56d9
:END:
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0.3
          company-dabbrev-downcase nil)
    (global-company-mode 1)
    (global-set-key (kbd "C-<tab>") 'company-complete))

  (use-package company-lsp
    :requires company
    :config
    (push 'company-lsp company-backends)

    ;; Disable client-side cache because the LSP server does a better job.
    (setq company-transformers nil
          company-lsp-async t
          company-lsp-cache-candidates nil))
#+END_SRC

Add yasnippet support for all company backends
#+BEGIN_SRC emacs-lisp
(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")

(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(setq company-backends (mapc #'company-mode/backend-with-yas company-backends))
#+END_SRC

* Deft
Deft is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes.

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :bind ("<f8>" . deft)
    :init (setq deft-directory "~/Dropbox/org/notes/"
                deft-extensions '("org" "md" "txt")
                deft-default-extension "org"
                deft-recursive t
                deft-auto-save-interval 0))
#+END_SRC

* Fun & Games
** Speed Type
#+BEGIN_SRC emacs-lisp
(use-package speed-type :defer t)
#+END_SRC

** Typing Of Emacs
#+BEGIN_SRC emacs-lisp
(use-package typing
  :defer t
  :quelpa (typing :fetcher wiki :url "https://www.emacswiki.org/emacs/typing.el"))
#+END_SRC

* Ido Mode
:PROPERTIES:
:ID:       2ef68f66-e742-437d-8363-b2d28785003f
:END:
#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure t)
  ;; ido mode
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere 1)
  (setq ido-enable-prefix t)
  (ido-mode 1)
  (flx-ido-mode 1)
  (setq ido-file-extensions-order '(".py" ".org" ".txt" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))

  ;; ido vertical
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  ;; ido switch buffer
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC

* Interface
** Beacon
:PROPERTIES:
:ID:       31ece10b-342c-4cbc-a9ac-96c604332fe0
:END:
Highlight current cursor position with fancy fade.

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

** Buffers
:PROPERTIES:
:ID:       15b2fba8-29d8-4d50-8326-98afdf59d431
:END:
Better buffers with ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; ibuffer expert mode (delete without asking)
  (setq ibuffer-expert t)
#+END_SRC

Group buffers by version control project
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
      :ensure t)
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
#+END_SRC

Add all the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-ibuffer
  :ensure t
  :init (all-the-icons-ibuffer-mode 1))
#+END_SRC

** Column Numbers
:PROPERTIES:
:ID:       3af55133-ad30-47b0-9b60-c8cf569b517e
:END:
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

** Conservative Scrolling
:PROPERTIES:
:ID:       94138b24-ecad-46af-916d-db3f8781a66c
:END:
Reducing scroll distance so it's actually useful.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Dashboard
:PROPERTIES:
:ID:       f3b10f7a-0cf2-49ea-a99e-aebd96c6cc39
:END:
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq show-week-agenda t)
    (setq dashboard-items '((recents . 10)
                            (bookmarks . 2)
                            (projects . 4)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/elpa/.*" (getenv "HOME"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq show-week-agenda t)
  (add-to-list 'dashboard-items '(agenda) t)
  (setq dashboard-center-content t)
#+END_SRC

** Disable Splash Screen
:PROPERTIES:
:ID:       4182fb11-c9d5-43eb-8773-de9bc7965c01
:END:
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Line Numbers
:PROPERTIES:
:ID:       40f9c775-7a11-42eb-b5d9-aa258f5034c8
:END:
#+BEGIN_SRC emacs-lisp
  ;; line numbers (except for some)
  (global-linum-mode 1)
  (use-package hlinum
    :ensure t
    :config
    (hlinum-activate))
#+END_SRC

** Menubar Deactivation
:PROPERTIES:
:ID:       03488665-43ac-46ac-bae1-d7b171059c11
:END:
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

** Popup Kill Ring
:PROPERTIES:
:ID:       a9a1e88c-ccd9-41c7-b5f0-6d8ea3843418
:END:
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("C-s-v" . popup-kill-ring))
#+END_SRC

** Projectile
:PROPERTIES:
:ID:       841918d2-2cd0-4c4e-a119-8b4f71e6cc6b
:END:
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ido)
    (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map))
#+END_SRC

** Scrollbar Deactivation
:PROPERTIES:
:ID:       ff5d758e-d6ba-4676-844a-95d17565f516
:END:
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

** Side-By-Side Buffers
:PROPERTIES:
:ID:       2455cb33-985b-4e69-abd7-2ce75835e38a
:END:
Buffers open with vertical split rather than horizontal split by default.

#+BEGIN_SRC emacs-lisp
  (defun 2-windows-vertical-to-horizontal ()
    (let ((buffers (mapcar 'window-buffer (window-list))))
      (when (= 2 (length buffers))
        (delete-other-windows)
        (set-window-buffer (split-window-horizontally) (cadr buffers)))))
  (add-hook 'emacs-startup-hook '2-windows-vertical-to-horizontal)
#+END_SRC

** Spaceline
*** Config
:PROPERTIES:
:ID:       a26cef4c-67be-4dc2-982c-61e56315effe
:END:
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t)

  (use-package spaceline-config
    :ensure spaceline
    :config
    (spaceline-helm-mode 1)
    (spaceline-emacs-theme))
#+END_SRC

*** Theme
:PROPERTIES:
:ID:       ef8aa0aa-ca90-4922-bf3f-ddd7dcf792fd
:END:
#+BEGIN_SRC emacs-lisp
  (use-package spaceline-all-the-icons
    :ensure t
    :after spaceline
    :config
    (spaceline-all-the-icons-theme)
    (setq-default spaceline-all-the-icons-separator-type 'arrow)
    (setq spaceline-all-the-icons-hide-long-buffer-path t))
#+END_SRC

** Toolbar Deactivation
:PROPERTIES:
:ID:       ba723c7b-3ca6-4346-a5bb-c5ba90e1454a
:END:
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

** Visual Line Mode
:PROPERTIES:
:ID:       4a68608e-5af3-4fec-a70e-3a4fdaa9d884
:END:
#+BEGIN_SRC emacs-lisp
  ;; visual line mode (except for pdf)
  (global-visual-line-mode 1)
#+END_SRC

** Which Key
:PROPERTIES:
:ID:       f7cd90ae-4cd5-4564-afbd-be6f4d680f2d
:END:
Which keybindings appears when you press part of a hotkey and wait.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

* Ivy
Counsel and Swiper.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  (setq counsel-find-file-ignore-regexp "\\.pyc\\'")
#+END_SRC

Smex for M-x recently used commands.
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init (setq-default smex-history-length 32))
#+END_SRC

Ivy integration with various modes.
#+BEGIN_SRC emacs-lisp
  ;; Integration with `projectile'
  (with-eval-after-load 'projectile
    (setq projectile-completion-system 'ivy))

  ;; Integration with `magit'
  (with-eval-after-load 'magit
    (setq magit-completing-read-function 'ivy-completing-read))

  ;; Ivy integration for Projectile
  (use-package counsel-projectile
    :init
    (setq counsel-projectile-grep-initial-input '(ivy-thing-at-point))
    (counsel-projectile-mode 1))

  ;; Integrate yasnippet
  (use-package ivy-yasnippet
    :commands ivy-yasnippet--preview
    :bind ("C-c C-y" . ivy-yasnippet)
    :config (advice-add #'ivy-yasnippet--preview :override #'ignore))

  ;; Correcting words with flyspell via Ivy
  (use-package flyspell-correct-ivy
    :after flyspell
    :bind (:map flyspell-mode-map
                ([remap flyspell-correct-word-before-point] . flyspell-correct-previous-word-generic)))

  ;; Display world clock using Ivy
  (use-package counsel-world-clock
    :bind (:map counsel-mode-map
                ("C-c c k" . counsel-world-clock)))

  ;; Tramp ivy interface
  (use-package counsel-tramp
    :bind (:map counsel-mode-map
                ("C-c c v" . counsel-tramp)))
#+END_SRC

Add all the icons to ivy!
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :init (ivy-rich-mode 1))
#+END_SRC

* Keybindings
** Copy Whole Line
:PROPERTIES:
:ID:       36d8fcc9-bb3b-43bc-ba5f-4ed5530fab62
:END:
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC

** Expand Region
:PROPERTIES:
:ID:       bc4c16bd-7f4e-4fc6-a9bc-a4e05d9a55e6
:END:
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** F5 Refresh
:PROPERTIES:
:ID:       bf88588e-444c-4ee7-a6fd-915ecac5e177
:END:
Setting buffer refresh to F5 as usual in other programs.

#+BEGIN_SRC emacs-lisp
  (global-set-key [f5]
                  '(lambda () "Refresh the buffer from the disk (prompt of modified)."
                     (interactive)
                     (revert-buffer t (not (buffer-modified-p)) t)))
#+END_SRC

** Font Size
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

** Goto-line
:PROPERTIES:
:ID:       2faf3100-352b-47c7-9a21-8a847b32c115
:END:
Rebind goto-line to Meta+g rather than Meta+g+g

#+BEGIN_SRC emacs-lisp
  (global-set-key "\M-g" 'goto-line)
#+END_SRC

** HHKB Super-Meta Switch
:PROPERTIES:
:ID:       88bb3bce-61f6-4d4b-9411-bdacd2c61e0d
:END:
Check if HHKB connected by counting occurences in dmesg output. If exists swap super and meta keys.
:PROPERTIES:
:ID:       64d4cf5b-a82e-4949-abbc-c9f732536200
:END:
#+BEGIN_SRC emacs-lisp
  (defun count-occurences (regex string)
    (recursive-count regex string 0))
  (defun recursive-count (regex string start)
    (if (string-match regex string start)
        (+ 1 (recursive-count regex string (match-end 0)))
      0))
  (setq dmesg-out
        (shell-command-to-string "/usr/bin/dmesg"))
  (setq hhkb-times
        (count-occurences "HHKB" dmesg-out))
  (if (> hhkb-times 0)
      (progn
        ;; (setq  x-meta-keysym 'meta
        ;;        x-super-keysym 'super)
        (message "HHKB connected on Linux.")))
#+END_SRC

** Kill All Buffers
:PROPERTIES:
:ID:       326c4224-9bd6-4369-b02e-6f064fc4adc7
:END:
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC

** MacOS Super-Meta Bind
:PROPERTIES:
:ID:       ca1cb7ed-b65c-4b4f-b3ed-b7d058d06e07
:END:
Check if host system is running MacOS and bind super and meta if true.
#+BEGIN_SRC emacs-lisp
  (if (string-equal system-type "darwin")
      (progn
        (setq mac-command-modifier 'meta
              mac-option-modifier 'super)
        (message "MacOS detected.")))
#+END_SRC

** Reload Config
:PROPERTIES:
:ID:       6a4940ee-ca5c-4ce3-b881-cf71108b7094
:END:
#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (global-set-key (kbd "C-s-M-u") 'reload-init-file)
#+END_SRC

* LSP
:PROPERTIES:
:ID:       140061e3-3985-423b-b578-841b25f67bff
:END:
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
     :diminish lsp-mode
     :hook (prog-mode . lsp-deferred)
     :bind (:map lsp-mode-map
            ("C-c C-d" . lsp-describe-thing-at-point))
     :init (setq lsp-auto-guess-root t       ; Detect project root
                 lsp-prefer-flymake nil      ; Use lsp-ui and flycheck
                 flymake-fringe-indicator-position 'right-fringe)
     :config
     ;; Configure LSP clients
     (use-package lsp-clients
       :ensure nil
       :init (setq lsp-clients-python-library-directories '("/usr/local/" "/usr/"))))

   (use-package lsp-ui
     :functions my-lsp-ui-imenu-hide-mode-line
     :commands lsp-ui-doc-hide
     :custom-face
     (lsp-ui-doc-background ((t (:background ,(face-background 'tooltip)))))
     (lsp-ui-sideline-code-action ((t (:inherit warning))))
     :bind (:map lsp-ui-mode-map
            ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
            ([remap xref-find-references] . lsp-ui-peek-find-references)
            ("C-c u" . lsp-ui-imenu))
     :init (setq lsp-ui-doc-enable t
                 lsp-ui-doc-use-webkit nil
                 lsp-ui-doc-delay 0.5
                 lsp-ui-doc-include-signature t
                 lsp-ui-doc-position 'top
                 lsp-ui-doc-border (face-foreground 'default)
                 lsp-eldoc-enable-hover nil ; Disableeldoc displays in minibuffer

                 lsp-ui-sideline-enable t
                 lsp-ui-sideline-show-hover nil
                 lsp-ui-sideline-show-diagnostics nil
                 lsp-ui-sideline-ignore-duplicate t)
     :config
     (add-to-list 'lsp-ui-doc-frame-parameters '(right-fringe . 8))

     ;; `C-g'to close doc
     (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

     ;; Reset `lsp-ui-doc-background' after loading theme
     (add-hook 'after-load-theme-hook
               (lambda ()
                 (setq lsp-ui-doc-border (face-foreground 'default))
                 (set-face-background 'lsp-ui-doc-background
                                      (face-background 'tooltip))))

     ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
     ;; @see https://github.com/emacs-lsp/lsp-ui/issues/243
     (defun my-lsp-ui-imenu-hide-mode-line ()
       "Hide the mode-line in lsp-ui-imenu."
       (setq mode-line-format nil))
     (advice-add #'lsp-ui-imenu :after #'my-lsp-ui-imenu-hide-mode-line))

   ;; Microsoft python-language-server support
   (use-package lsp-python-ms
     :hook (python-mode . (lambda ()
                            (require 'lsp-python-ms)
                            (lsp-deferred))))
#+END_SRC

* Magit
:PROPERTIES:
:ID:       abd1e2b9-fc03-4cc7-a0e6-23f79edf2600
:END:
Install Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

* Org Mode
** Org
:PROPERTIES:
:ID:       b8727327-3f58-4271-aab3-13c4c50a6fd5
:END:
Use org-mode from Melpa.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :defer t
    ;;:init (setq initial-major-mode 'org-mode) ;; Set mode of *scratch* buffer
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           :map org-mode-map
           ;; ("C-h" . org-delete-backward-char)
           ("C-c !" . org-time-stamp-inactive))
    :mode ("\\.org$" . org-mode))
#+END_SRC

** Org Agenda Files
:PROPERTIES:
:ID:       1643a891-f4a6-47e1-9222-bd412bc6539a
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/org/inbox.org"
                           "~/Dropbox/org/private.org"
                           "~/Dropbox/org/work.org"
                           "~/Dropbox/org/remind.org"))
#+END_SRC

** Org Bullets
:PROPERTIES:
:ID:       98a1a25e-637b-4023-bda4-3541d0f9bb00
:END:
:PROPERTIES:
:ID:	      f4b83b9e-f2fa-4289-a550-38dbf5e56e84
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()  (org-bullets-mode))))
#+END_SRC

** Org Capture Templates
:PROPERTIES:
:ID:       2f4a11c1-80b8-4cbc-8838-ea58a63e2f69
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Dropbox/org/inbox.org" "Tasks")
                                 "* TODO %i%?")))
#+END_SRC

** Org Keywords
:PROPERTIES:
:ID:       9fe6270b-e52e-44c0-81f1-ac7ea7648cca
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

** Org Refile Targets
:PROPERTIES:
:ID:       7c360ae8-eb4d-4e55-946b-8905c6fa8d15
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '(("~/Dropbox/org/work.org" :maxlevel . 4)
                             ("~/Dropbox/org/private.org" :maxlevel . 3)
                             ("~/Dropbox/org/someday.org" :level . 1)
                             ("~/Dropbox/org/remind.org" :maxlevel . 2)))
#+END_SRC

** Org Settings
:PROPERTIES:
:ID:       9b3acb45-4ef9-4c95-8d17-82549e282738
:END:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-SRC-window-setup 'current-window)
  (setq org-SRC-fontify-natively t)
  (setq org-SRC-tab-acts-natively t)
#+END_SRC

** Org Sort Recursively
Function to sort all entires in the current buffer, recursively.
#+BEGIN_SRC emacs-lisp
(defun org-sort-buffer ()
  "Sort all entries in the current buffer, recursively. Including top level"
  (interactive)
  (org-sort-entries nil ?a)
  (org-map-entries (lambda ()
                     (condition-case x
                         (org-sort-entries nil ?a)
                       (user-error)))))
#+END_SRC

** Org Template Keywords
:PROPERTIES:
:ID:       fe8ef927-284f-40ee-9c15-14e24c284592
:END:
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC

* PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-view
    :ensure pdf-tools
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :bind (:map pdf-view-mode-map
           ("C-s" . isearch-forward))
    :init
    (setq pdf-annot-activate-created-annotations t)
    :config
    ;; WORKAROUND: Fix compilation errors on macOS.
    ;; @see https://github.com/politza/pdf-tools/issues/480
    (when (string-equal system-type "darwin")
      (setenv "PKG_CONFIG_PATH"
              "/usr/local/lib/pkgconfig:/usr/local/opt/libffi/lib/pkgconfig"))
    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
    (pdf-tools-install t nil t t))
#+END_SRC

* Programming Modes
** C++
:PROPERTIES:
:ID:       116979f7-cfb4-4e98-93f3-7db3565c6ad7
:END:
#+BEGIN_SRC emacs-lisp
  ;; consider .h files as c++ rather than c by default
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (global-set-key (kbd "C-x c") 'compile)
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:ensure t
:commands (markdown-mode gfm-mode)
:mode (("README\\.md\\'" . gfm-mode)
("\\.md\\'" . markdown-mode)
("\\.markdown\\'" . markdown-mode))
:init (setq markdown-command "multimarkdown"))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :hook (inferior-python-mode . (lambda ()
                                  (process-query-on-exit-flag
                                   (get-process "Python"))))
  :init
  ;; Disable readline based native completion
  (setq python-shell-completion-native-enable nil)
  :config
  ;; Default to Python 3. Prefer the versioned Python binaries since some
  ;; systems stupidly make the unversioned one point at Python 2.
  (when (and (executable-find "python2")
             (string= python-shell-interpreter "python2"))
    (setq python-shell-interpreter "python2"))

  ;; Env vars
  (with-eval-after-load 'exec-path-from-shell
    (exec-path-from-shell-copy-env "PYTHONPATH"))

  ;; Live Coding in Python
  (use-package live-py-mode)

  (use-package python-black
    :demand t
    :after python))
#+END_SRC

Automagically resolve imports (requires importmagic and epc)
#+BEGIN_SRC emacs-lisp
(use-package importmagic
    :ensure t
    :config
    (add-hook 'python-mode-hook 'importmagic-mode))
#+END_SRC

* Snippets
** Enable Yasnippet
:PROPERTIES:
:ID:       9cbc9021-cf0f-44a1-b574-bf50ba1e1de1
:END:
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC

** Individual Mode Hooks
*** Bash
:PROPERTIES:
:ID:       5d6a92f4-f6d2-40e3-ae07-c57cc5732cb6
:END:
#+BEGIN_SRC emacs-lisp
  (add-hook 'bash-mode-hook 'yas-minor-mode)
#+END_SRC

*** C++
:PROPERTIES:
:ID:       b2d384da-ba21-41ba-87cf-abd66f4cd0a8
:END:
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
#+END_SRC

*** Emacs Lisp
:PROPERTIES:
:ID:       d0f75f69-2771-4f5b-93d4-5166fcdb726f
:END:
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC

*** Org Mode
#+BEGIN_SRC emacs-lisp
  (defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))
  (add-hook 'org-mode-hook
      (lambda ()
        (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
        (define-key yas-keymap [tab] 'yas-next-field)))
  (add-hook 'org-mode-hook 'yas-minor-mode)
#+END_SRC

*** Python
:PROPERTIES:
:ID:       e456a968-a82e-43dc-b8e3-a6a28f228287
:END:
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+END_SRC

* Spellchecking
:PROPERTIES:
:ID:       a7c07d3b-b7cd-4a38-9499-78180798539b
:END:
#+BEGIN_SRC emacs-lisp
    ;; find aspell and hunspell automatically
    (cond
     ;; try hunspell at first
     ;; if hunspell does NOT exist, use aspell
     ((executable-find "hunspell")
      (setq ispell-program-name "hunspell")
      (setq ispell-local-dictionary "en_GB")
      (setq ispell-local-dictionary-alist
            ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
            ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
            '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB") nil utf-8)
              ))
  )
     ((executable-find "aspell")
      (setq ispell-program-name "aspell")
      ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
      (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB"))))
#+END_SRC

* Terminal
** Colour
:PROPERTIES:
:ID:       22ca5483-0ba7-48a9-a414-3aab8c245022
:END:
Enable more terminal colours.

:PROPERTIES:
:ID:       fe131591-ba56-4ede-82d1-5faee46a4708
:END:
#+BEGIN_SRC emacs-lisp
  (use-package eterm-256color
    :ensure t
    :config
    (add-hook 'term-mode-hook #'eterm-256color-mode))
#+END_SRC

** Default Shell
:PROPERTIES:
:ID:       a1ca5ac0-f458-4b82-afd0-492106f3435d
:END:
Setting default shell to bash within ansi-term.

#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term  (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Emacs Shell $PATH
:PROPERTIES:
:ID:       5561db53-640f-478d-a4f2-bd16aca28e61
:END:
Make sure Emacs shell sees correct system $PATH from .bash_profile

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (exec-path-from-shell-initialize))
#+END_SRC

** Hotkey
:PROPERTIES:
:ID:       f5062990-f60d-4c67-b494-97e18ee95599
:END:
Setting hotkey for ansi-term in emacs - Super+T.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-t") 'ansi-term)
#+END_SRC

* Useful Tweaks
** Consistent Answers
:PROPERTIES:
:ID:       5f184a63-b8d2-48ae-960e-d4ec85db3b4e
:END:
Setting yes and no to y and n for brevity and consistency.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Delete Selection Mode
:PROPERTIES:
:ID:       80bbc030-cb8e-4c99-a6a4-b17c79326f5e
:END:
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Delete Trailing Whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** IEdit
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t)
#+END_SRC

** Move Line
:PROPERTIES:
:ID:       194ebea4-defe-42f8-9225-9bf47355c135
:END:
#+BEGIN_SRC emacs-lisp
;; M-↑,↓ moves line, or marked region; prefix is how many lines.
(use-package move-text
  :config (move-text-default-bindings))
#+END_SRC

** Pair Completion
:PROPERTIES:
:ID:       6d7edb6d-17ae-4be8-ab78-c9d08f5a9b49
:END:
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              (?\" . ?\")
                              (?\' . ?\')))
  (electric-pair-mode t)
#+END_SRC

** Persistent Scratch
Persistent the scratch buffer
#+BEGIN_SRC emacs-lisp
  (use-package persistent-scratch
    :preface
    (defun my-save-buffer ()
      "Save scratch and other buffer."
      (interactive)
      (let ((scratch-name "*scratch*"))
        (if (string-equal (buffer-name) scratch-name)
            (progn
              (message "Saving %s..." scratch-name)
              (persistent-scratch-save)
              (message "Wrote %s" scratch-name))
          (save-buffer))))
    :hook (after-init . persistent-scratch-setup-default)
    :bind (:map lisp-interaction-mode-map
           ("C-x C-s" . my-save-buffer)))
#+END_SRC

** Show Parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Sudo Edit
:PROPERTIES:
:ID:       68be1506-4bcc-43f5-a389-b5e40577ee83
:END:
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-u" . sudo-edit))
#+END_SRC

** UTF-8
*** UFT-8 Everywhere
:PROPERTIES:
:ID:       35e57af2-28d4-49fb-bb3d-a3818f5bcabb
:END:
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

*** UTF-8 Uppercase Declaration
:PROPERTIES:
:ID:       8cef681a-e6b7-4150-b031-c5fb3f39de32
:END:
#+BEGIN_SRC emacs-lisp
  (define-coding-system-alias 'UTF-8 'utf-8)
#+END_SRC

** Warning Bell Deactivation
:PROPERTIES:
:ID:       6bae70ba-ddce-4da4-82d5-04f6150c2e8d
:END:
Apparently there is a warning bell/beep and light - not seen it though..

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

* Zetteldeft
Extend the deft package and turn it into a (very very) basic Zettelkasten note-taking system. Requires Avy for text movement.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package zetteldeft
    :ensure t)
  (zetteldeft-set-classic-keybindings)
#+END_SRC
